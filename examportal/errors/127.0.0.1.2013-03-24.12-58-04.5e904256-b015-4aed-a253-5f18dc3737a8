(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: correctopt"
p3
sS'layer'
p4
S'/home/abhishek/web2py/applications/ittest/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to Online Examination Portal!")\n    k=db(db.auth_membership.user_id==auth.user.id).select(db.auth_membership.group_id)\n    print k[0].group_id\n    if k[0].group_id==1:\n\t    redirect(URL(\'faculty_home\'))\n    else:\n\t    redirect(URL(\'student_home\'))\n    return dict(message=T(\'Hello World\'))\ndef faculty_home():\n\treturn dict(message=T(\'Welcome faculty\'))\ndef student_home():\n\treturn dict(message=T(\'Welcome Student\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    auth.settings.register_onaccept=__add_user_membership\n    return dict(form=auth())\ndef __add_user_membership(form):\n\tgroup=db(db.auth_group.role==form.vars.profession).select().first()\n\tprint group,form.vars\n\tuser_id=form.vars.id\n\tauth.add_membership(group.id,user_id)\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\ndef reg():\n\tform=SQLFORM(db.auth_user)\n\tif(form.accepts(request,session)):\n\t\tform.process()\n\t\tif(form.vars.profession==\'Faculty\'):\n\t\t\tauth.add_membership(1,form.vars.id)\n\t\telse:\n\t\t\tauth.add_membership(2,form.vars.id)\n\t\tresponse.flash=\'Form Accepted\'\n\telif(form.errors):\n\t\tresponse.flash=\'Form Has Errors\'\n\telse:\n\t\tresponse.flash=\'Fill Form\'\n\treturn dict(form=form)\n@auth.requires_login()\n@auth.requires_membership(\'Faculty\')\ndef make_paper():\n\t#if(db.auth_user.profession==\'Students\'):\n\t\t#redirect(URL(\'student_home\'))\n#\telse:\n\tform=SQLFORM(db.qptable)\n\t#print form\n\tif(form.accepts(request,session)):\n\t\t#print \'lo1\'\n\t\tform.process()\n\t\tsession.k=int(form.vars.no_of_question)\n\t\tsession.l=1\n\t\tsession.q=form.vars.id\n\t\tprint \'hi\'\n\t\tredirect(URL(r=request,f=\'set_paper\'))\n\telif(form.errors):\n\t\tresponse.flash=\'Form Has Errors\'\n\telse:\n\t\tresponse.flash=\'Fill Form\'\n\treturn dict(form=form)\ndef correctoptions():\n\t#print \'kt\'\n\t#form=SQLFORM(db.correctoptions)\n\t#print \'loi\'\n\t#print form\n\tform=SQLFORM.factory(\'correctopt\',\n\t\t\tField(\'qtable\',db.qtable,requires=IS_IN_DB(db,\'qtable.id\',\'qtable.question\')),\n\t\t\tField(\'name\',\'string\',requires=IS_IN_SET(range(1,(session.opt)+1),multiple=True)))\n\tform.vars.qtable=session.q1\n\t#print form\n\t#form.vars.name._requires=IS_IN_SET(range(1,(session.opt)+1),multiple=True)\n\tif(form.accepts(request,session)):\n\t\tprint \'it worked\'\n\t\t#form.process()\n\t\t#db.correctoptions.insert(qtable=form.vars.qtable,name=correctopt.name)\n\t\tprint \'it qorked\'\n\t\tredirect(URL(r=request,f=\'set_paper\'))\n\telif(form.errors):\n\t\tresponse.Flash=\'Form Has Errors\'\n\telse:\n\t\tresponse.Flash=\'Fill Correct Options\'\n\treturn dict(form=form)\ndef set_paper():\n\tprint \'yoy\'\n\tk=int(session.k)\n\tl=int(session.l)\n\tif(l<=k):\n\t\tq=session.q\n\t\tform=SQLFORM(db.qtable)\n\t\tform.vars.qnumber=l\n\t\tform.vars.qptableid=q\n\t\tif(form.accepts(request,session)):\n\t\t\tform.process()\n\t\t\tsession.opt=form.vars.number_of_option\n\t\t\tsession.op=1\n\t\t\t(session.l)+=1\n\t\t\tl=session.l\n\t\t\tprint \'king\'\n\t\t\tif(l<=k+1):\n\t\t\t\tprint \'king2\'\n\t\t\t\tsession.r=1\n\t\t\t\t(session.q1)=form.vars.id\n\t\t\t\tsession.j=int(form.vars.number_of_option)\n\t\t\t\tredirect(URL(r=request,f=\'set_option\'))\n\t\t\telse:\n\t\t\t\tredirect(URL(\'faculty_home\'))\n\t\telif(form.errors):\n\t\t\tresponse.flash=\'Form Has Errors\'\n\t\telse:\n\t\t\tresponse.flash=\'Fill Form\'\n\t\treturn dict(form=form)\ndef set_option():\n\tj=int(session.j)\n\tr=int(session.r)\n\tq1=session.q1\n\tk=int(session.k)\n\tl=int(session.l)\n\tq=session.q\n\tform=SQLFORM(db.qoptions)\n\tform.vars.qoption_num=r\n\tform.vars.qname=q1\n\tif(form.accepts(request,session)):\n\t\tform.process()\n\t\tsession.r+=1\n\t\tr=session.r\n\t\tif(r<=j):\n\t\t\tredirect(URL(r=request,f=\'set_option\'))\n\t\telse:\n\t\t\tredirect(URL(r=request,f=\'correctoptions\'))\n\telif(form.errors):\n\t\tresponse.flash=\'Form Has Errors\'\n\telse:\n\t\tresponse.flash=\'Fill Form\'\n\treturn dict(form=form)\n\nresponse._vars=response._caller(correctoptions)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/abhishek/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/abhishek/web2py/applications/ittest/controllers/default.py", line 201, in <module>\n  File "/home/abhishek/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/abhishek/web2py/applications/ittest/controllers/default.py", line 133, in correctoptions\n    Field(\'name\',\'string\',requires=IS_IN_SET(range(1,(session.opt)+1),multiple=True)))\n  File "/home/abhishek/web2py/gluon/sqlhtml.py", line 1588, in factory\n    return SQLFORM(DAL(None).define_table(table_name, *fields),\n  File "/home/abhishek/web2py/gluon/dal.py", line 7677, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/abhishek/web2py/gluon/dal.py", line 7694, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/abhishek/web2py/gluon/dal.py", line 8124, in __init__\n    \'define_table argument is not a Field or Table: %s\' % field)\nSyntaxError: define_table argument is not a Field or Table: correctopt\n'
p11
s.